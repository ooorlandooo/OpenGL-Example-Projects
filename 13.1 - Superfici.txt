#include GLglew.h
#include GLfreeglut.h
#include time.h
#define _USE_MATH_DEFINES
#include math.h
#include stdio.h


typedef struct NORMAL {
	float x;
	float y;
	float z;
}NORMAL;

typedef struct VERTEX {
	float x;
	float y;
	float z;
}VERTEX;

typedef struct FACE {
	int NVertex;
	int FaceIndex;
	int VertexIndex;
} FACE;

typedef struct POLYGON {
	int NVertex;
	VERTEX  PolygonVertexs;
	int NNormals;
	NORMAL  PolygonNormals;
	int NFaces;
	FACE  PolygonFaces;
}POLYGON;

typedef struct POINTOFVIEW {
	float x = 0;
	float y = 1;
	float z = 9;
}POINTOFVIEW;

typedef struct VISUALVOL {
	float Xstart = -40;
	float Xend = 40;
	float Ystart = -40;
	float Yend = 40;
	float Zstart = -30;
	float Zend = 10;
	float VisualAngle = 45;
};

typedef struct RGB {
	float R = 0.1;
	float G = 0.1;
	float B = 0.1;
	float OPACITY = 1.0;
};

typedef struct WINDOWSIZE {
	int HEIGHT = 640;
	int WIDTH = 640;
};

typedef struct TIMEROTATION {
	int ROTATEMINUTES = 45;
	int ROTATESECONDS = 45;
};
typedef struct BUTTON {
	float xStart = 0;
	float xEnd = 0;
	float yStart = 0;
	float yEnd = 0;
};
functions
pulisce e inizializza campo di discegno
void initBasicDraw();
disegna la scena
void printScene();
riporta errori
void checkError(char label);
cambia il colore di sfondo con un click da pad
void changeBackgoundColor();
disegna un prisma a 8 facce
void drawGrid(float x, float y, float firstZ, float secondZ);
 regola le interazioni con la tastiera
void keyboard(unsigned char key, int x, int y);
 ritorna la normale del poligono in ingresso
NORMAL getNormal(VERTEX polygonVertexs, int  vIndex, int N);
 ritorna la normale del poligono in ingresso
FACE setFace(int faceIndex, int nVertex, int vertexsIndex);
inizializza un poligono
POLYGON initPolygon(int nVertex, int nNormals, int nFaces);
calcola la Ydella griglia da disegnare
float getY(float x, float z);
anima la superfice modificando il parametro k
void animate(int value);
valuta la curva di bezier a dun dato t e restituisce un punto della curva
VERTEX bezierEvaluation(int controlPointsNumber, float t);
dizegna una curva di bezier
void drawBezier();
caloclo coord omogenee
void calcoloCoordOmogenee(GLfloat points[], GLfloat w[], int x, int y);
mouse motion
void mouse(int button, int state, int x, int y);
global variables
GLfloat cpw[4][4][4];

const int START = 0;
const int STOP = 1;
const int RESET = 2;
POINTOFVIEW view;
TIMEROTATION timer;
VISUALVOL volumeDiVista;
WINDOWSIZE window;
BUTTON stopButton;
int lancets = STOP;
int Kparam = 1;
RGB color;
double TWO_PI = (2  M_PI);
const int Numbers[15] = { '1','2','3','4','5','6','7','8','9','1','0','1','1','1','2' };
VERTEX controlPoints;

void main(int argc, char argv) {
	srand(time(0));
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB);
	glutInitWindowPosition(300, 100);
	glutInitWindowSize(window.WIDTH, window.HEIGHT);
	glutCreateWindow(argv[0]);
	glutDisplayFunc(printScene);
	glutMouseFunc(mouse);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
}


void mouse(int button, int state, int x, int y) {
	float xx = ((float)x  (window.WIDTH  2) - 1);
	float yy = ((float)y  (window.HEIGHT  2) - 1);
	printf(button nstartx %f, endx %f, starty %f, endy %fn x %f, y %fn, stopButton.xStart, stopButton.xEnd, stopButton.yStart, stopButton.yEnd, xx, yy);
	if (xx = stopButton.xStart && xx = stopButton.xEnd && yy = stopButton.yStart && yy = stopButton.yEnd) {
		if (state == GLUT_UP) {
			if (button == GLUT_LEFT_BUTTON) {

			}
			else if (button == GLUT_MIDDLE_BUTTON) {
			}
			else if (button == GLUT_RIGHT_BUTTON) {

			}
		}
	}
}

void checkError(char label) {
	GLenum error;
	while ((error = glGetError()) != GL_NO_ERROR) {
		printf(%s %sn, label, gluErrorString(error));
	}
}

void initBasicDraw() {
	changeBackgoundColor();
	glLoadIdentity();
	glMatrixMode(GL_MODELVIEW);
	glPointSize(3.0);
	glClear(GL_COLOR_BUFFER_BIT);
}

void keyboard(unsigned char key, int x, int y) {

	switch (key) {
	case 'd'  destra 
		if (view.x  11) {
			view.x += 0.1;
		}
		break;
	case 'a'sinistra
		if (view.x  -11) {
			view.x += -0.1;
		}
		break;
	case 'w'su
		if (view.y  11) {
			view.y += 0.1;
		}
		break;
	case 's'  giu 
		if (view.y  -11) {
			view.y += -0.1;
		}
		break;
	case 'x'
		Kparam++;
	}

	glutPostRedisplay();
}

void animate(int value) {
	glutTimerFunc(10, animate, 0);
	Kparam++;
	glutPostRedisplay();
}
void printScene() {
	initBasicDraw();
	glClearColor(0, 0, 0, 1);
	glClear(GL_COLOR_BUFFER_BIT  GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(-4, 4, -4, 4, 5, 15);
	glScalef(0.01, 0.01, 0.01);

	gluPerspective(volumeDiVista.VisualAngle, 1, volumeDiVista.Zstart, volumeDiVista.Zend);
	glMatrixMode(GL_MODELVIEW);
	glEnable(GL_NORMALIZE);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glShadeModel(GL_FLAT);

	glPushMatrix();

	glLoadIdentity();

	glPushMatrix();
	glTranslatef(0.2, 0.2, 0.0);
	glRotatef(-30, 1, 1, 0);
	drawBezier();
	glPopMatrix();
	glMatrixMode(GL_PROJECTION);
	glPopMatrix();
}


cambia il colore di sfondo
void changeBackgoundColor() {
	glClearColor(color.R, color.G, color.B, color.OPACITY);
	glClear(GL_COLOR_BUFFER_BIT);
}

NORMAL getNormal(VERTEX polygonVertexs, int  vIndex, int N) {
	NORMAL myNormal;
	myNormal.x = 0;
	myNormal.y = 0;
	myNormal.z = 0;
	for (int i = 0; i  N; i++) {
		myNormal.x += (polygonVertexs[vIndex[i]].y - polygonVertexs[vIndex[(i + 1) % N]].y)(polygonVertexs[vIndex[i]].z + polygonVertexs[vIndex[(i + 1) % N]].z);
		myNormal.y += (polygonVertexs[vIndex[i]].z - polygonVertexs[vIndex[(i + 1) % N]].z)(polygonVertexs[vIndex[i]].x + polygonVertexs[vIndex[(i + 1) % N]].x);
		myNormal.z += (polygonVertexs[vIndex[i]].x - polygonVertexs[vIndex[(i + 1) % N]].x)(polygonVertexs[vIndex[i]].y + polygonVertexs[vIndex[(i + 1) % N]].y);
	}
	return myNormal;
}

FACE setFace(int faceIndex, int nVertex, int vertexsIndex) {
	FACE myFace;
	myFace.FaceIndex = faceIndex;
	myFace.NVertex = nVertex;
	myFace.VertexIndex = (int )malloc(nVertex  sizeof(int));
	for (int i = 0; i nVertex; i++)
		myFace.VertexIndex[i] = vertexsIndex[i];
	return myFace;
}

POLYGON initPolygon(int nVertex, int nNormals, int nFaces) {
	POLYGON myPolygon;
	myPolygon.NVertex = nVertex;
	myPolygon.NNormals = nNormals;
	myPolygon.NFaces = nFaces;
	myPolygon.PolygonVertexs = (VERTEX )malloc(myPolygon.NVertex  sizeof(VERTEX));
	myPolygon.PolygonFaces = (FACE )malloc(myPolygon.NFaces  sizeof(FACE));
	myPolygon.PolygonNormals = (NORMAL )calloc(myPolygon.NNormals, sizeof(NORMAL));
	return myPolygon;
}

float getY(float x, float z) {
	return (2  sin(sqrt((xx) + (zz))))  sqrt((xx) + (zz));
}

float getY2(float x, float z) {
	return (2  sin(sqrt((xx) + (zz)) - (Kparam  M_PI  32)))  (sqrt((xx) + (zz)) - (Kparam  M_PI  32));
}

void calcoloCoordOmogenee(GLfloat points[4][4][3], GLfloat w[4][4], int x, int y) {
	GLfloat tmp = (GLfloat )malloc(x  sizeof(GLfloat));


	for (int i = 0; i  x; i++) {
		for (int j = 0; j  y; j++) {
			for (int k = 0; k  x; k++) {
				cpw[i][j][k] = points[i][j][k]  w[i][j];
				
			}
			cpw[i][j][3] = w[i][j];
		}
	}

}

void drawBezier() {
	int controlPointsNumber = 4;
	VERTEX point;
	float pace = 0.001;
	float t = 0.1;
	glClearColor(1, 1, 1, 1);
	controlPoints = (VERTEX )malloc(controlPointsNumber  sizeof(VERTEX));

	controlPoints[0].x = -0.5;
	controlPoints[0].y = 0.0;
	controlPoints[0].z = 0.0;

	controlPoints[1].x = -0.5;
	controlPoints[1].y = 0.5;
	controlPoints[1].z = 0.0;

	controlPoints[2].x = 0.5;
	controlPoints[2].y = 0.7;
	controlPoints[2].z = 0.0;

	controlPoints[3].x = 0.5;
	controlPoints[3].y = 0.0;
	controlPoints[3].z = 0.0;

	float Npassi = (1 - 0)  pace;
	nuovo disegno superficie di Bezier
	GLfloat points[4][4][3] = { { { -1.5,-1.5,4.0 },{ -0.5,-1.5,2.0 },{ 0.5,-1.5,-1.0 },{ 1.5,-1.5,2.0 } },
	{ { -1.5,-0.5,1.0 },{ -0.5,-0.5,3.0 },{ 0.5,-0.5,0.0 },{ 1.5,-0.5,-1.0 } },
	{ { -1.5,0.5,4.0 },{ -0.5,0.5,0.0 },{ 0.5,0.5,3.0 },{ 1.5,0.5,4.0 } },
	{ { -1.5,1.5,-2.0 },{ -0.5,1.5,-2.0 },{ 0.5,1.5,0.0 },{ 1.5,1.5,-1.0 } } };

	GLfloat w[4][4] = { {1,0.5,0.5,1},{ 1,0.5,0.5,1 },{ 1,0.5,0.5,1 },{ 1,0.5,0.5,1 } };
	GLfloat w[4][4] = { { 1,1,1,1 },{ 1,1,1,1 },{ 1,1,1,1 },{ 1,1,1,1 } };
	GLfloat w[4] = { 1.0,5.0,1.0,1.0 };
	calcoloCoordOmogenee(points, w, 4, 3);
	gluLookAt(view.x, view.y, view.z, 0, 0, 0, 0.0, 1.0, 0.0);
	glMap2f(GL_MAP2_VERTEX_4, 0.0, 1, 4, 4, 0, 1, 16, 4, &cpw[0][0][0]);
	glEnable(GL_MAP2_VERTEX_4);
	glClearColor(1, 0, 0, 1);
	
	glMapGrid2f(30, 0, 1, 30, 0 , 1);
	glEvalMesh2(GL_LINE, 0, 30, 0, 30);
	for (int j = 0; j = 8;j++) {
		glBegin(GL_LINE_STRIP);
		for (int i = 0; i = 30; i++) glEvalCoord2f((GLfloat)i  30.0, (GLfloat)j  8.0);
		glEnd();
		glBegin(GL_LINE_STRIP);
		for (int i = 0; i = 30; i++) glEvalCoord2f((GLfloat)j  8.0, (GLfloat)i  30.0);
		glEnd();
	}

	glFlush();
}
void drawGrid(float x, float y, float firstZ, float secondZ) {

	POLYGON grid;
	int vertexIndex[4] = { 0,1,2,3 };
	int vertexIndex[4] = { 3,2,1,0 };
	VERTEX polVert[4];
	NORMAL normal;



	float pace = 0.3;
	gluLookAt(view.x, view.y, view.z, x, y, firstZ, 0.0, 1.0, 0.0);
	printf(k=%d, Kparam);
	for (float i = -10; i  10; i = i + pace) {
		for (float j = -10; j  10; j = j + pace) {
			polVert[0].x = i + pace;
			polVert[0].y = getY2(i + pace, j + pace);
			polVert[0].z = j + pace;
			polVert[1].x = i + pace;
			polVert[1].y = getY2(i + pace, j);
			polVert[1].z = j;
			polVert[2].x = i;
			polVert[2].y = getY2(i, j);
			polVert[2].z = j;
			polVert[3].x = i;
			polVert[3].y = getY2(i, j + pace);
			polVert[3].z = j + pace;
			glBegin(GL_QUADS);
			normal = getNormal(polVert, vertexIndex, 4);
			printf( %f, %f , %fn, normal.x, normal.y, normal.z);
			glNormal3f(normal.x, normal.y, normal.z);
			glVertex3f(polVert[0].x, polVert[0].y, polVert[0].z);
			glVertex3f(polVert[1].x, polVert[1].y, polVert[1].z);
			glVertex3f(polVert[2].x, polVert[2].y, polVert[2].z);
			glVertex3f(polVert[3].x, polVert[3].y, polVert[3].z);
			glEnd();
			glBegin(GL_POINTS);
			glVertex3f(normal.x,normal.y,normal.z);
			glEnd();
			
		}
	}

	checkError(drawGrid);
	glFlush();

}

VERTEX bezierEvaluation(int controlPointNumber, float t) {
	VERTEX Points;
	Points = (VERTEX )malloc(controlPointNumber  sizeof(VERTEX));
	for (int i = 0; i  controlPointNumber; i++) {
		Points[i] = controlPoints[i];
	}
	for (int i = 1; i  controlPointNumber; i++) {
		for (int j = 0; j  (controlPointNumber - i); j++) {
			Points[j].x = ((1 - t)  Points[j].x) + (t  Points[j + 1].x);
			Points[j].y = ((1 - t)  Points[j].y) + (t  Points[j + 1].y);
			Points[j].z = ((1 - t)  Points[j].z) + (t  Points[j + 1].z);
		}
	}
	return Points[0];
}
